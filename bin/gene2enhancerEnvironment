#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2enhancerEnvironment: compute distal chromatin environment of genes
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
SCORE_COL=5
CHROMHMMPATH="/home/pundhir/software/ChromHMM"
PROCESSOR=1
STATES=15

#### usage ####
usage() {
	echo Program: "gene2enhancerEnvironment (compute distal chromatin environment of genes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2enhancerEnvironment -i <file> -j <file> -k <dir> -l <file> -o <dir> [OPTIONS]"
	echo "Options:"
    echo " -i <file>   [configuration file containing list of histone peak files]"
    echo "             [format: each line corresponds to absolute path of peak files corresponding to one epigenetic mark, eg.]"
    echo "             [        <ID><SPACE|TAB>h3k27me3_peaks.bed]"
    echo "             [        <ID><SPACE|TAB>h3k4me3_peaks.bed]"
    echo "             [        <ID><SPACE|TAB>h3k4me1_peaks.bed]"
    echo " -j <file>   [configuration file containing list of histone bam files]"
    echo "             [format: each line corresponds to name of bam file for a single epigenetic mark, eg.]"
    echo "             [        <CELL><TAB><ID><TAB>h3k27me3.bam]"
    echo "             [        <CELL><TAB><ID><TAB>h3k4me3.bam]"
    echo " -k <dir>    [absolute path to bam files provided in bam configuration file (-k)]"
	echo " -l <file>   [input genomic coordinates of promoters in BED format (can be stdin)]"
    echo " -o <dir>    [output directory to store results]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -c <int>    [column containing score information in histone peak files (default: 5)]"
    echo " -e <file>   [input genomic coordinates of enhancers in BED format]"
    echo "             [if provided, peaks overlapping enhancers will be used for analysis]"
    echo "[OPTIONS: ChromHMM]"
    echo " -t <dir>    [absolute path to ChromHMM jar file (default: /home/pundhir/software/ChromHMM)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo " -s <int>    [number of ChromHMM states (default: 15)"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:l:o:g:c:e:t:p:s:h ARG; do
	case "$ARG" in
        i) PEAKCONFIGFILE=$OPTARG;;
        j) BAMCONFIGFILE=$OPTARG;;
        k) BAMPATH=$OPTARG;;
		l) PROMOTERFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        c) SCORE_COL=$OPTARG;;
        e) ENHANCERFILE=$OPTARG;;
        t) CHROMHMMPATH=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        s) STATES=$OPTARG;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ ! -f "$PEAKCONFIGFILE" -o ! -f "$BAMCONFIGFILE" -o ! -d "$BAMPATH" -o -z "$PROMOTERFILE" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
>&2 echo "done"

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
if [ "$PROMOTERFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo "${LINE}"
    done > $OUTDIR/$TMP
    PROMOTERFILE=$OUTDIR/$TMP
else
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    zless $PROMOTERFILE | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } print $_;' > $OUTDIR/$TMP
    PROMOTERFILE=$OUTDIR/$TMP
fi

## annotate peaks using genome segments defined by ChromHMM
>&2 echo -n "Annotated peaks using genome segments defined by ChromHMM (`date`).. "
if [ ! -f "$OUTDIR/ANNOTATEDPEAKS.BED" ]; then
    regions2classify -i $PEAKCONFIGFILE -j $BAMCONFIGFILE -k $BAMPATH -o $OUTDIR/chromhmm -g $GENOME -c $SCORE_COL -t $CHROMHMMPATH -p $PROCESSOR -s $STATES > $OUTDIR/ANNOTATEDPEAKS.BED
fi
>&2 echo "done"

## assign annotated peaks to genes and compute weighted signal
>&2 echo -n "Assign annotated peaks to genes and compute weighted signal (`date`).. "
COL=$(zless $OUTDIR/ANNOTATEDPEAKS.BED | grep -v start | head -n 1 | perl -ane '$col="7"; for($i=8; $i<=scalar(@F); $i++) { $col.=",$i"; } print $col;')

if [ -f "$ENHANCERFILE" ]; then
    TMP_SUB=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    intersectBed -a <(zless $OUTDIR/ANNOTATEDPEAKS.BED | grep -v start) -b $ENHANCERFILE -u > $TMP_SUB
    bed2weightedSignal -i $PROMOTERFILE -j $TMP_SUB -g $GENOME -c $COL -s 4
    rm $TMP_SUB
else
    bed2weightedSignal -i $PROMOTERFILE -j $OUTDIR/ANNOTATEDPEAKS.BED -g $GENOME -c $COL -s 4
fi
>&2 echo "done"

## remove temporary file, if exists
if [ ! -z "$OUTDIR/$TMP" ]; then
    rm $OUTDIR/$TMP
fi
