#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
p3002enhancers: predict enhancers using P300 and h3k4me3 modification
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
GENOME="mm9"
PROCESSOR=1

MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
DISTANCE=70
SCALE="0.6"
BLOCKHEIGHT="abs"
PVALUE="0.05"
MERGEDISTANCE=0
DISTRIBUTION="nbinom"

## empirically estimated based on median width of p300 peaks
PEAKDISTANCE=300

#### usage ####
usage() {
	echo Program: "p3002enhancers (predict enhancers using P300 and h3k4me3 modification)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: p3002enhancers -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input P300 data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo " -j <file>   [input h3k4me1 modification data in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: enhancers)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo " -k <file>   [IgG control file in BAM format]"
    echo " -n <int>    [assign h3k4me1 peak to enhancer, if within this distance (default: 500)]"
    echo "[OPTIONS: bam2peaks]"
    echo " -c <int>    [minimum number of read in the block group (default: 2)]"
    echo " -e <int>    [minimum number of read in the block (default: 2)]"
    echo " -x <int>    [maximum distance between the blocks (default: 70)]"
    echo " -s <float>  [scale to define blocks (default: 0.6)]"
    echo " -g <int>    [block height (abs or rel) (default: abs)]"
    echo " -t <float>  [FDR at which to consider a peak as significant (default: 0.05)]"
    echo " -v <int>    [merge peaks separated by input distance (default: 0)]"
    echo " -d <int>    [distribution to use for data fit (pois or nbinom) (default: nbinom)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:m:p:k:n:c:e:x:s:g:t:v:d:h ARG; do
	case "$ARG" in
		i) P300FILE=$OPTARG;;
        j) HISTONEFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        k) CONTROLFILE=$OPTARG;;
        n) PEAKDISTANCE=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        t) PVALUE=$OPTARG;;
        v) MERGEDISTANCE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$P300FILE" -o -z "$HISTONEFILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

if [ ! -d "$OUTDIR/logs" ]; then
    mkdir -p $OUTDIR/logs
    mkdir -p $OUTDIR/p300
    mkdir -p $OUTDIR/h3k4me1
fi

>&2 echo "done"

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    usage
fi
>&2 echo "done"

>&2 echo -n "Predict peaks on p300 data (`date`).. "
if [ ! -s "$OUTDIR/p300/PEAKS.BED" ]; then
    if [ -z "$CONTROLFILE" ]; then
        bam2peaks -i $P300FILE -o $OUTDIR/p300 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION &>$OUTDIR/logs/bam2peaks_p300.log
    else
        bam2peaks -i $P300FILE -o $OUTDIR/p300 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -l $CONTROLFILE &>$OUTDIR/logs/bam2peaks_p300.log
    fi
fi
>&2 echo "done"

>&2 echo -n "Predict peaks on H3K4me1 data (`date`).. "
if [ ! -s "$OUTDIR/h3k4me1/PEAKS.BED" ]; then
    if [ -z "$CONTROLFILE" ]; then
        bam2peaks -i $HISTONEFILE -o $OUTDIR/h3k4me1 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION &>$OUTDIR/logs/bam2peaks_h3k4me1.log
    else
        bam2peaks -i $HISTONEFILE -o $OUTDIR/h3k4me1 -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -l $CONTROLFILE &>$OUTDIR/logs/bam2peaks_h3k4me1.log
    fi
fi
>&2 echo "done"

>&2 echo -n "Determine optimal distance between peaks to merge (`date`).. "
if [ ! -s "$OUTDIR/p300/PEAKS.BED" -o ! -s "$OUTDIR/h3k4me1/PEAKS.BED" ]; then
    >&2 echo
    >&2 echo "P300 or H3K4me1 Peak file is not computed properly.. "
    >&2 echo "exiting.. "
    >&2 echo
    exit
else
    NCOL=$(head -n 1 $OUTDIR/h3k4me1/PEAKS.BED | perl -ane 'print scalar(@F);')
    closestBed -a <(sortBed -i $OUTDIR/h3k4me1/PEAKS.BED) -b <(sortBed -i $OUTDIR/h3k4me1/PEAKS.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/PEAKS.BED.DIST

    bed2shuffle -i $OUTDIR/h3k4me1/PEAKS.BED -g $GENOME > $OUTDIR/SHUFFLE.BED

    closestBed -a <(sortBed -i $OUTDIR/SHUFFLE.BED) -b <(sortBed -i $OUTDIR/SHUFFLE.BED) -io -d -t first | perl -ane '$mean=($F[4]+$F['$(($NCOL+4))'])/2; print "$mean\t$F[scalar(@F)-1]\n";' | sort -k 2n,2 > $OUTDIR/SHUFFLE.BED.DIST

    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    cut -f 2 $OUTDIR/PEAKS.BED.DIST > $OUTDIR/PEAKS.BED.DIST.$TMP
    cut -f 2 $OUTDIR/SHUFFLE.BED.DIST > $OUTDIR/SHUFFLE.BED.DIST.$TMP
    MERGEDISTANCE=$($FINDNFRPATH/share/R/findIntersectionPoint.R -i $OUTDIR/PEAKS.BED.DIST.$TMP -j $OUTDIR/SHUFFLE.BED.DIST.$TMP -m median)
    >&2 echo $MERGEDISTANCE
    rm $OUTDIR/PEAKS.BED.DIST.$TMP
    rm $OUTDIR/SHUFFLE.BED.DIST.$TMP
  
    if [ "$MERGEDISTANCE" -gt 1000 ]; then
        MERGEDISTANCE=1000
    fi

    bedtools merge -i <(sortBed -i $OUTDIR/h3k4me1/PEAKS.BED) -d $MERGEDISTANCE > $OUTDIR/PEAKS.BED.MERGED

    zless $OUTDIR/p300/PEAKS.BED | bed2window -i stdin -w 0 | perl -ane 'if($F[0]=~/\_/ || $F[0]=~/chrM/) { next; } else { print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\n"; }' > $OUTDIR/P300_MID.BED

    #multiIntersectBed.sh -i $OUTDIR/PEAKS.BED.MERGED,$OUTDIR/P300_MID.BED -j h3k4me1,p300 | grep -v p300 | cut -f 1-3 | sortBed -i stdin > $OUTDIR/PEAKS.BED.MERGED.$TMP
    #mv $OUTDIR/PEAKS.BED.MERGED.$TMP $OUTDIR/PEAKS.BED.MERGED

    closestBed -a <(sortBed -i $OUTDIR/P300_MID.BED) -b $OUTDIR/PEAKS.BED.MERGED -d -t first | perl -ane '$enhancer_chr=$F[0]; $enhancer_start=$F[1]; $enhancer_end=$F[2]; if($F[scalar(@F)-1] < '$PEAKDISTANCE' && $F[scalar(@F)-1] >= 0) { $start=$F[7]-0; $end=$F[8]+0; $defined="Y"; } else { $start=$F[1]-50; $end=$F[1]+50; $defined="N"; } if($start<0) { $start=1; } $F[1]=$start; $F[2]=$end; for($i=0; $i<6; $i++) { print "$F[$i]\t"; } print "$defined\t$enhancer_chr:$enhancer_start-$enhancer_end";
    if($F[5]=~/\-/) { 
        $up=$enhancer_start-$F[2];
        $down=$enhancer_end-$F[1];
        if($up>0) { $up=0; }
        if($down<0) { $down=0; }
    }
    else {
        $up=$F[1]-$enhancer_start;
        $down=$F[2]-$enhancer_end;
        if($up>0) { $up=0; }
        if($down<0) { $down=0; }
    } print "\t$up\t$down\n";' | perl -ane '
        if($F[9]<=0) {
            @enhancer_coor=split(/[\:\-]/,$F[7]);
            $F[1]=$enhancer_coor[1]-50;
            $F[2]=$enhancer_coor[2]+50;
            $F[9]=50;
            $F[6]="N";
        }
        print "$F[0]";
        foreach(@F[1..scalar(@F)-1]) { print "\t$_"; }
        print "\n";' | perl -ane '@t=split(/[\:\-]+/,$F[7]); print "$t[0]\t$t[1]\t$t[2]\t$F[0]:$F[1]-$F[2]\t$F[4]\t$F[5]\t$F[6]\t$F[7]\t$F[8]\t$F[9]\n";' > $OUTDIR/$TMP

        closestBed -a <(sortBed -i $OUTDIR/$TMP) -b <(sortBed -i $OUTDIR/P300_MID.BED) -D ref -fu -t first -io | perl -ane 'print "$F[0]"; foreach(@F[1..9]) { print "\t$_"; } print "\t$F[scalar(@F)-1]\n";' | perl -ane 'if($F[10]<0 && $F[10]>$F[8]) { $F[8]="$F[10]"; } print "$F[0]"; foreach(@F[1..9]) { print "\t$_"; } print "\n";' > $OUTDIR/$TMP.$TMP
        mv $OUTDIR/$TMP.$TMP $OUTDIR/$TMP

        closestBed -a <(sortBed -i $OUTDIR/$TMP) -b <(sortBed -i $OUTDIR/P300_MID.BED) -D ref -fd -t first -io | perl -ane 'print "$F[0]"; foreach(@F[1..9]) { print "\t$_"; } print "\t$F[scalar(@F)-1]\n";' | perl -ane 'if($F[10]>0 && $F[10]<$F[9]) { $F[9]="$F[10]"; } print "$F[0]"; foreach(@F[1..9]) { print "\t$_"; } print "\n";'

        rm $OUTDIR/$TMP

    #TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    #cat <(grep -w Y $OUTDIR/define_promoter/GENES_PROMOTER.BED) <(closestBed -a <(grep -vw Y $OUTDIR/define_promoter/GENES_PROMOTER.BED | bed2window -i stdin -w 0 | cut -f 1-6) -b <(cat $OUTDIR/ALLPEAKS.BED | perl -ane 'if($F[6]<0.2) { print $_; }' | sortBed -i stdin) -d -t first | perl -ane 'if($F[scalar(@F)-1] < '$PEAKDISTANCE' && $F[scalar(@F)-1] >= 0) { $start=$F[7]-0; $end=$F[8]+0; $defined="Y1"; } else { $start=$F[1]-50; $end=$F[1]+50; $defined="N"; } if($start<0) { $start=1; } $F[1]=$start; $F[2]=$end; for($i=0; $i<6; $i++) { print "$F[$i]\t"; } print "$defined\n";') > $TMP
    #mv $TMP $OUTDIR/define_promoter/GENES_PROMOTER.BED
fi
>&2 echo "done"
