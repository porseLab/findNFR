#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"
AVG=0

#### usage ####
usage() {
	echo Program: "tss2binExpr (compute read count corresponding to input TSS and flanking regions divided into bins)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: tss2binExpr -i <file> -j <file(s)>"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinates of TSS in BED format (can be stdin)]"
    echo "             [FORMAT: chr start end name score strand distance]"
    echo "             [distance is optional, computed using gene2promoter)]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple seperate by a comma]"
    echo "[OPTIONS]"
    echo " -s <float>  [normalize expression by input size factor]"
    echo "             [if multiple, seperate them by a comma]"
    echo " -m          [normalize expression by counts per million mapped reads (RPM)]"
    echo " -k          [normalize expression by counts per kilo base per million mapped reads (RPKM)]"
    echo " -d          [remove duplicate reads]"
    echo " -e <int>    [extend 3' end of reads by input number of bases (useful for ChIP-seq data)]"
    echo " -v <int>    [instead of giving expression for each replicate, output only the mean (deafult: 0)]"
    echo "             [assumes that consecutive input files are replicates 1 and 2, respectively]"
    echo " -r          [require same strandedness]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo " In case of error: Could not open input BAM files, refer to:"
    echo " https://groups.google.com/forum/#!msg/bedtools-discuss/_LNuoRWHn50/14MaqyzyzXsJ"
    echo " i.e. make sure header of all input bam files is identical"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:s:mkde:g:v:rh ARG; do
	case "$ARG" in
		i) INPUTBEDFILE=$OPTARG;;
        j) INPUTBAMFILES=$OPTARG;;
        s) INPUTSIZEFACTORS=$OPTARG;; 
        m) CPM=1;;
        k) FPKM=1;;
        d) REMOVE_DUPLICATE=1;;
        e) INPUTEXTENDS=$OPTARG;;
        g) GENOME=$OPTARG;;
        v) AVG=$OPTARG;;
        r) SAME_STRAND=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTBEDFILE" -o -z "$INPUTBAMFILES" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
elif [ "$GENOME" == "rn5" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/rat.rn5.genome"
else
    echo "Presently the program only support analysis for mm9, hg19 or rn5"
    echo
    usage
fi

## parse input bam files in an array
oIFS=$IFS
IFS=","
BAMFILES=($INPUTBAMFILES)
BAMFILES_COUNT=${#BAMFILES[@]}
IFS=$oIFS

## initialize size factors, if both size factors and total reads not provided
if [ -z "$INPUTSIZEFACTORS" -a -z "$CPM" -a -z "$FPKM" ]; then
    INPUTSIZEFACTORS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        INPUTSIZEFACTORS="$INPUTSIZEFACTORS,1"
    done
    INPUTSIZEFACTORS=`echo $INPUTSIZEFACTORS | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## initialize extend parameter, if not provided
if [ -z "$INPUTEXTENDS" ]; then
    INPUTEXTENDS=""
    for(( i=0; i<$BAMFILES_COUNT; i++ )); do
        INPUTEXTENDS="$INPUTEXTENDS,0"
    done
    INPUTEXTENDS=`echo $INPUTEXTENDS | perl -ane '$_=~s/^\,//g; print $_;'`;
fi

## parse extend parameter in an array
IFS=","
EXTENDS=($INPUTEXTENDS)
EXTENDS_COUNT=${#EXTENDS[@]}
IFS=$oIFS

## parse bam files in an array
IFS=","
INPUTBAMFILES=$(echo $INPUTBAMFILES | sed 's/\,/ /g')
IFS=$oIFS

## create temporary BED file if input is from stdin
if [ "$INPUTBEDFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    INPUTBEDFILE=$TMP
fi

## parse input BED file
cat $INPUTBEDFILE | perl -ane '
    if($F[5]=~/\-/) { 
        $hfr_start=$F[1]-40;
        $hfr_end=$F[1]+90;

        $up_start=$hfr_end+1;
        $up_end=$up_start+50;

        $nfr_start=$F[1]-($F[6]-10);
        if($nfr_start < $hfr_start) {
            $nfr_end=$hfr_start-1;
        } else {
            $nfr_end=$hfr_end;
        }

        $down_end=$nfr_start-1;
        $down_start=$down_end-50;
    } else {
        $hfr_start=$F[1]-90;
        $hfr_end=$F[1]+40;

        $up_end=$hfr_start-1;
        $up_start=$up_end-50;

        $nfr_end=$F[1]+($F[6]-10);
        if($nfr_end > $hfr_end) {
            $nfr_start=$hfr_end+1;
        } else {
            $nfr_start=$hfr_start;
        }

        $down_start=$nfr_end+1;
        $down_end=$down_start+50;
    }
    chomp($_);
    print "$_\t$F[0]:$up_start-$up_end\t$F[0]:$hfr_start-$hfr_end\t$F[0]:$nfr_start-$nfr_end\t$F[0]:$down_start-$down_end\n";'

if [ ! -z "$TMP" ]; then
    rm $TMP
fi

exit
