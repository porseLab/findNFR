#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2signalValues: compute signal values at gene promoter and genebody using input bam files
Copyright (C) 2018  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
WINDOW=300

#### usage ####
usage() {
	echo Program: "gene2signalValues (compute signal values at gene promoter and genebody using input bam files)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2signalValues -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in BED format]"
    echo "             [format: chr start end name score strand]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple, separate them by a comma]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -w <int>    [extend TSS downstream with input number of bases to define TSSR (default: 300)]"
    echo " -c <file>   [input mapped reads in BAM format for control sample]"
    echo " -e          [tesr mode: use signal at TSSR, TESR to compute pausing (default: genebody mode)]"
    echo " -d          [directionality mode: use signal at TSS_UP, TSS_DOWN, Genebody (default: genebody mode)]"
    echo " -a          [output raw read counts (default: RPKM normalized)]"
    echo " -r          [require same strandedness (GRO-seq)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo "             [genebody mode: TSSR/Genebody]"
    echo "             [tesr mode: TSSR/TESR]"
    echo "             [directionality mode: TSS_UP/TSS_DOWN/Genebody]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:w:c:edarh ARG; do
	case "$ARG" in
		i) GENEFILE=$OPTARG;;
        j) BAMFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        w) WINDOW=$OPTARG;;
        c) BAMFILECONTROL=$OPTARG;;
        e) TESR_MODE=1;;
        d) DIRECTIONALITY_MODE=1;;
        a) RAW=1;;
        r) SAME_STRAND=1;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GENEFILE" -o -z "$BAMFILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	>&2 usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    >&2 usage
fi
>&2 echo "done"

## create temporary BED file if input is from stdin
if [ "$GENEFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo "${LINE}"
    done > $TMP
    GENEFILE=$TMP
fi

## check if input gene file is in proper format
NCOL=$(zless $GENEFILE | perl -ane 'print scalar(@F)."\n";' | sort -k 1r,1 | head -n 1)
if [ "$NCOL" -lt "6" ]; then
    >&2 echo
    >&2 echo "input gene file is not in correct format"
    >&2 echo
    >&2 usage
fi

## parse input bam files in an array
oIFS=$IFS
IFS=","
BAMFILES=($BAMFILE)
BAMFILES_COUNT=${#BAMFILES[@]}
IFS=$oIFS

>&2 echo -n "Start computing spreading index for genes using input BAM files (`date`).. "
NCOL=$(zless  $GENEFILE | head -n 1 | perl -ane 'print scalar(@F);')
LAST_COL=$(perl -e '$col='$NCOL'+'$BAMFILES_COUNT'; print "$col";')

ARG=""
if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
if [ -z "$RAW" ]; then ARG=$(echo $ARG "-k "); fi
if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-r "); fi

if [ ! -z "$TESR_MODE" ]; then
    paste <(zless $GENEFILE) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -S | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -E | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $tesr_col=$tssr_col+'$BAMFILES_COUNT'; print "\t$F[$tssr_col]/$F[$tesr_col]"; } print "\n";' 
elif [ ! -z "$DIRECTIONALITY_MODE" ]; then
    paste <(zless $GENEFILE) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -t | bed2window -i stdin -c | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -n | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -v | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_COUNT'; $i++) { $tss_up_col=$i+'$NCOL'; $tss_down_col=$tss_up_col+'$BAMFILES_COUNT'; $genebody_col=$tss_up_col+'$BAMFILES_COUNT'*2; print "\t$F[$tss_up_col]/$F[$tss_down_dol]/$F[$genebody_col]"; } print "\n";' 
else
    paste <(zless $GENEFILE) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -S | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) <(zless $GENEFILE | bed2window -i stdin -w $WINDOW -v | bedtools slop -i stdin -g $GENOME_FILE -l 0 -r 3000 -s | bed2expr -i stdin -j $BAMFILE -d -n -g $GENOME $ARG | cut -f $((NCOL+1))-$LAST_COL) | perl -ane 'print "$F[0]"; for($i=1; $i<'$NCOL'; $i++) { print "\t$F[$i]"; } for($i=0; $i<'$BAMFILES_COUNT'; $i++) { $tssr_col=$i+'$NCOL'; $genebody_col=$tssr_col+'$BAMFILES_COUNT'; print "\t$F[$tssr_col]/$F[$genebody_col]"; } print "\n";' 
fi

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP
fi

>&2 echo "All done.. bye"
