#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2regulatoryComplexity: predict regulatory complexity of genes
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
GENOME="mm9"

#### usage ####
usage() {
	echo Program: "gene2regulatoryComplexity (predict regulatory complexity of genes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2regulatoryComplexity -i <file> -j <file(s)> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in BED format]"
    echo " -j <file>   [input file containing genomic coordinates of regions enriched for a particular feature in BED format]"
    echo "             [format: chr start end score strand ... (typically PEAKS.BED from bam2peaks script)]"
    echo "             [score represents quantitative measure of features such as epigenetic marks, splicing, methylation, motifs, expression at a region]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: analysis)"
    echo " -g <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (run in parallel)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:g:p::h ARG; do
	case "$ARG" in
		i) GENEFILE=$OPTARG;;
        j) PEAKFILEs=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        g) GENOME=$OPTARG;;
        p) PARALLEL=$OPTARG;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GENEFILE" -o -z "$PEAKFILEs" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Determine number of input peak files (`date`).. "
oIFS=$IFS
IFS=","
PEAKFILEa=($PEAKFILEs)
IFS=$oIFS
echo "done"

echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi

if [ "$GENOME" == "mm9" ]; then
    GENOME_MACS2="mm"
elif [ "$GENOME" == "mm10" ]; then
    GENOME_MACS2="mm"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_MACS2="hs"
elif [ "$GENOME" == "hg38" ]; then
    GENOME_MACS2="hs"
fi
echo done

