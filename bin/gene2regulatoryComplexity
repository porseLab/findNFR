#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2regulatoryComplexity: predict regulatory complexity of genes
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
OUTDIR="peaks";
GENOME="mm9"
PROCESSOR=1

MINCLUSTERHEIGHT=2
MINBLOCKHEIGHT=2
DISTANCE=70
SCALE="0.6"
BLOCKHEIGHT="abs"
PVALUE="0.05"
MERGEDISTANCE=0
DISTRIBUTION="nbinom"

WINDOW=1000

#### usage ####
usage() {
	echo Program: "gene2regulatoryComplexity (predict regulatory complexity of genes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2regulatoryComplexity -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in BED format]"
    echo " -j <file>   [configuration file containing list of BAM files used to compute regulatory complexity]"
    echo "             [format: each line corresponds to absolute path of BAM files corresponding to one epigenetic mark, eg.]"
    echo "             [        <ID><SPACE|TAB>h3k27me3_esc_Rep1.bam,h3k27me3_esc_Rep2.bam<SPACE|TAB>control_Rep1.bam]"
    echo "             [        <ID><SPACE|TAB>h3k4me3_esc_Rep1.bam,h3k4me3_esc_Rep2.bam<SPACE|TAB>control_Rep1.bam]"
    echo "             [        <ID><SPACE|TAB>h3k4me1_esc_Rep1.bam,h3k4me1_esc_Rep2.bam<SPACE|TAB>control_Rep1.bam]"
    echo "[OPTIONS]"
    echo " -o <dir>    [output directory to store results (default: analysis)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (default: 1)]"
    echo "[OPTIONS: bam2peaks]"
    echo " -c <int>    [minimum number of read in the block group (default: 2)]"
    echo " -e <int>    [minimum number of read in the block (default: 2)]"
    echo " -x <int>    [maximum distance between the blocks (default: 70)]"
    echo " -s <float>  [scale to define blocks (default: 0.6)]"
    echo " -g <int>    [block height (abs or rel) (default: abs)]"
    echo " -t <float>  [FDR at which to consider a peak as significant (default: 0.05)]"
    echo " -v <int>    [merge peaks separated by input distance (default: 0)]"
    echo " -d <int>    [distribution to use for data fit (pois or nbinom) (default: nbinom)]"
    echo "[OPTIONS: regulatory complexity]"
    echo " -w <int>    [window size by which to flank gene TSS (default: 1000 bp)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:o:m:p:c:e:x:s:g:t:v:d:w:h ARG; do
	case "$ARG" in
		i) GENEFILE=$OPTARG;;
        j) CONFIGFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PROCESSOR=$OPTARG;;
        c) MINCLUSTERHEIGHT=$OPTARG;;
        e) MINBLOCKHEIGHT=$OPTARG;;
        x) DISTANCE=$OPTARG;;
        s) SCALE=$OPTARG;;
        g) BLOCKHEIGHT=$OPTARG;;
        t) PVALUE=$OPTARG;;
        v) MERGEDISTANCE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
        w) WINDOW=$OPTARG;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GENEFILE" -o ! -f "$CONFIGFILE" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
    mkdir -p $OUTDIR/peaks
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    echo
    usage
fi
echo "done"

## create temporary BED file if input is from stdin
if [ "$GENEFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $OUTDIR/$TMP
    GENEFILE=$OUTDIR/$TMP
fi

echo -n "Start predicting peaks on input BAM files (`date`).. "
BAMFILEs=""
REPLICATES=0
while read LINE; do
    ID=$(echo $LINE | perl -ane 'print "$F[0]"')
    BAMFILE=$(echo $LINE | perl -ane 'print "$F[1]"')
    CONTROLFILE=$(echo $LINE | perl -ane 'print "$F[2]"')
    #if [ ! -s "$OUTDIR/peaks/$ID/PEAKS.BED" ]; then
        if [ -z "$CONTROLFILE" ]; then
            bam2peaks -i ${BAMFILE} -o $OUTDIR/peaks/$ID -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION
        else
            bam2peaks -i ${BAMFILE} -o $OUTDIR/peaks/$ID -m $GENOME -p $PROCESSOR -c $MINCLUSTERHEIGHT -e $MINBLOCKHEIGHT -x $DISTANCE -s $SCALE -g $BLOCKHEIGHT -t $PVALUE -v $MERGEDISTANCE -d $DISTRIBUTION -l $CONTROLFILE
        fi
    #fi

    if [ ! -s "$OUTDIR/peaks/$ID/PEAKS.BED" ]; then
        echo
        echo "Peak file $OUTDIR/peaks/$ID/PEAKS.BED is not computed properly.. "
        echo "exiting.. "
        echo
        exit
    fi

    REPLICATES=$(echo $BAMFILE | perl -an -F'/\,/' -e 'print scalar(@F);')
    BAMFILEs="$BAMFILEs,$BAMFILE"
done < $CONFIGFILE
BAMFILEs=$(echo $BAMFILEs | perl -ane '$_=~s/^\,//; print $_;')
echo "done"

echo -n "Define gene promoter (`date`).. "
if grep -qw h3k4me3 $CONFIGFILE; then
    BAMFILE=$(grep -w h3k4me3 $CONFIGFILE | cut -f 2 -d " ")
    gene2promoter -i $GENEFILE -j $BAMFILE -o $OUTDIR/peaks/h3k4me3 -n $WINDOW
    mv $OUTDIR/peaks/h3k4me3/GENES_PROMOTER.BED $OUTDIR/GENES_PROMOTER.BED
else
    zless $GENEFILE | bed2window -i stdin -w $WINDOW -x | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\tNA\n";' > $OUTDIR/GENES_PROMOTER.BED
fi
echo "done"

echo -n "Compute histone peaks overlapping and proximal to genes (`date`).. "
OVERLAPFILE=""
PROXIMALFILE=""
while read LINE; do
    ID=$(echo $LINE | perl -ane 'print "$F[0]"')
    #if [ ! -s "$OUTDIR/peaks/$ID/PEAKS_OVERLAPPING_GENES.BED" ]; then
        intersectBed -a $OUTDIR/GENES_PROMOTER.BED -b $OUTDIR/peaks/$ID/PEAKS.BED -wao | intersectBed2uniq -i stdin -c 12,16,17 -o sum -n 7 > $OUTDIR/peaks/$ID/PEAKS_OVERLAPPING_GENES.BED
    #fi
    OVERLAPFILE="$OVERLAPFILE $OUTDIR/peaks/$ID/PEAKS_OVERLAPPING_GENES.BED"

    #if [ ! -s "$OUTDIR/peaks/$ID/PEAKS_PROXIMAL_GENES.BED" ]; then
        TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        closestBed -a <(sortBed -i $OUTDIR/peaks/$ID/PEAKS.BED) -b <(sortBed -i $OUTDIR/GENES_PROMOTER.BED) -t first -io | closestBed2uniq -i stdin -c 8,9,10 -o sum -n 7 > $OUTDIR/peaks/$ID/$TMP
        cat $OUTDIR/GENES_PROMOTER.BED | perl -ane '$match=`grep -E \"\\s+$F[3]\\s+\" '$OUTDIR/peaks/$ID/$TMP' -m 1`; if($match=~/^$/) { chomp($_); print "$_\t0\t0\t0\n"; } else { chomp($match); print "$match\n"; }' > $OUTDIR/peaks/$ID/PEAKS_PROXIMAL_GENES.BED
        rm $OUTDIR/peaks/$ID/$TMP
    #fi
    PROXIMALFILE="$PROXIMALFILE $OUTDIR/peaks/$ID/PEAKS_PROXIMAL_GENES.BED"
done < $CONFIGFILE

OVERLAPFILE=$(echo $OVERLAPFILE | perl -ane '$_=~s/^\s+//g; print $_;')
PROXIMALFILE=$(echo $PROXIMALFILE | perl -ane '$_=~s/^\s+//g; print $_;')
echo "done"

echo -n "Compute regulatory complexity of input genes (`date`).. "
oIFS=$IFS
IFS=" "
OVERLAPFILES=($OVERLAPFILE)
OVERLAPFILES_COUNT=${#OVERLAPFILES[@]}
IFS=$oIFS

HEADER="chr\tstart\tend\tgene\tscore\tstrand\tpromoter_defined"

COLUMNS="1-7"
for(( i=1; i<=$OVERLAPFILES_COUNT; i++ )); do
    ID=$(echo ${OVERLAPFILES[$i-1]} | perl -ane '@t=split(/\//, $_); print $t[scalar(@t)-2];')
    #HEADER="$HEADER\t$ID\t$ID\t$ID"
    #COLUMNS="$COLUMNS,$(perl -e '$last=(10*'$i'); $first=$last-2; print "$first-$last"')"
    HEADER="$HEADER\t$ID"
    COLUMNS="$COLUMNS,$(perl -e '$last=(10*'$i'); $first=$last-2; print "$first"')"
done

echo -e $HEADER > $OUTDIR/OVERLAPPING_REGULATORY_COMPLEXITY.BED
paste $OVERLAPFILE | cut -f $COLUMNS >> $OUTDIR/OVERLAPPING_REGULATORY_COMPLEXITY.BED

echo -e $HEADER > $OUTDIR/PROXIMAL_REGULATORY_COMPLEXITY.BED
paste $PROXIMALFILE | cut -f $COLUMNS >> $OUTDIR/PROXIMAL_REGULATORY_COMPLEXITY.BED
echo "done"

echo -n "Compute regulatory complexity of input genes using histone reads overlapping to gene promoters (`date`).. "
#if [ ! -s "$OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED" -a "$REPLICATES" -gt 1 ]; then
    echo -e $HEADER > $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
    bed2expr -i $OUTDIR/GENES_PROMOTER.BED -j $BAMFILEs -d -v 1 -g $GENOME >> $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
#elif [ ! -s "$OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED" ]; then
    echo -e $HEADER > $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
    bed2expr -i $OUTDIR/GENES_PROMOTER.BED -j $BAMFILEs -d -g $GENOME >> $OUTDIR/PROMOTER_REGULATORY_COMPLEXITY.BED
#fi
echo "done"

echo "All done.. bye"
