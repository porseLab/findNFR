#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
bed2weightedSignal: computed signal for input regions weighted by their distance to each other
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

GENOME="mm9"
SCORE_COL=5

#### usage ####
usage() {
	echo Program: "bed2weightedSignal (computed signal for input regions weighted by their distance to each other)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2weightedSignal -i <file> -j <file>"
	echo "Options:"
	echo " -i <file>     [input file containing genomic coordinates of regions in BED format (can be stdin)]"
    echo "               [format: chr start end gene_name score strand (..)]"
	echo " -j <file>     [input file containing genomic coordinates of signal in BED format]"
    echo "               [format: chr start end name score strand (..)]"
    echo "[OPTIONS]"
    echo " -g <string>   [genome (default: mm9)]"
    echo " -c <int>      [column containing score information of signal; -j argument (default: 5)]"
    echo "               [if multiple, please separate them by a comma]"
	echo " -h            [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:c:h ARG; do
	case "$ARG" in
		i) REGIONFILE=$OPTARG;;
		j) SIGNALFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        c) SCORE_COL=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$REGIONFILE" -o ! -f "$SIGNALFILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
elif [ "$GENOME" == "rn5" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/rat.rn5.genome"
else
    echo "Presently the program only support analysis for mm9, hg19 or rn5"
    echo
    usage
fi

## create temporary BED file if input is from stdin
if [ "$REGIONFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo -e "${LINE}"
    done > $TMP
    REGIONFILE=$TMP
fi

## determine width of the input regions
WIDTH=$(zless $REGIONFILE | perl -ane '$max=0; if($F[2]-$F[1] > $max) { $max=$F[2]-$F[1]; } END { print $max; }')

## reformat score columns based on number of fields in region file
NCOL_REGION=$(zless $REGIONFILE | head -n 1 | perl -ane 'print scalar(@F);')
NCOL_SIGNAL=$(zless $SIGNALFILE | head -n 1 | perl -ane 'print scalar(@F);')
oIFS=$IFS
IFS=","
SCORE_COLS=($SCORE_COL)
IFS=$oIFS

## compute signal at each input region
if [ "$WIDTH" -gt 2 ]; then
    SCORE_COL=$((${SCORE_COLS[0]}+$NCOL_REGION))
    for(( i=1; i<${#SCORE_COLS[@]}; i++)); do
        SCORE_COL="$SCORE_COL,$((${SCORE_COLS[$i]}+$NCOL_REGION))"
    done

    intersectBed -a $REGIONFILE -b $SIGNALFILE -wao | intersectBed2uniq -i stdin -c $SCORE_COL -o sum -n $NCOL_REGION
else
    DISTANCE_COL=$(($NCOL_REGION+$NCOL_SIGNAL+1))
    SCORE_COL="$SCORE_COL,$DISTANCE_COL"
    oIFS=$IFS
    IFS=","
    SCORE_COLS=($SCORE_COL)
    IFS=$oIFS

    TMP_CLOSESTBED=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    closestBed -a <(sortBed -i $SIGNALFILE) -b <(sortBed -i $REGIONFILE) -d -t first -io | closestBed2uniq -i stdin -c $SCORE_COL -o collapse -n 7 > $TMP_CLOSESTBED
    cat $REGIONFILE | perl -ane '$match=`grep -E \"\\s+$F[3]\\s+\" '$TMP_CLOSESTBED' -m 1`; if($match=~/^$/) { chomp($_); print "$_"; for($i=0; $i<'${#SCORE_COLS[@]}'; $i++) { print "\tNA"; } print "\n"; } else { chomp($match); print "$match\n"; }'
    rm $TMP_CLOSESTBED
fi

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP;
fi

exit
