#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
bed2weightedSignal: computed signal for input regions weighted by their distance to each other
Copyright (C) 2017  Sachin Pundhir (pundhir@binf.ku.dk)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

GENOME="mm9"
SCORE_COL=5

#### usage ####
usage() {
	echo Program: "bed2weightedSignal (computed signal for input regions weighted by their distance to each other)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2weightedSignal -i <file> -j <file>"
	echo "Options:"
	echo " -i <file>     [input file containing genomic coordinates of promoters in BED format (can be stdin)]"
    echo "               [format: chr start end gene_name score strand (..)]"
	echo " -j <file>     [input file containing genomic coordinates of peaks in BED format]"
    echo "               [format: chr start end name score strand (..)]"
    echo "[OPTIONS]"
    echo " -g <string>   [genome (default: mm9)]"
    echo " -c <int>      [column containing score information in peak file; -j argument (default: 5)]"
    echo "               [if multiple, please separate them by a comma]"
    echo " -s <int>      [column containing genome segment information computed by ChromHMM (Optional)]"
    echo "[OPTIONS: Approach]"
    echo " -v            [compute using overlap approach (default is closest approach)]"
    echo " -y            [compute using both overlap and closest approach (default is closest approach)]"
	echo " -h            [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:c:s:vyh ARG; do
	case "$ARG" in
		i) PROMOTERFILE=$OPTARG;;
		j) PEAKFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        c) SCORE_COL=$OPTARG;;
        s) SEGMENT_COL=$OPTARG;;
        v) OVERLAP_APPROACH=1;;
        y) OVERLAP_CLOSEST_APPROACH=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$PROMOTERFILE" -o ! -f "$PEAKFILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
elif [ "$GENOME" == "rn5" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/rat.rn5.genome"
else
    echo "Presently the program only support analysis for mm9, hg19 or rn5"
    echo
    usage
fi

## create temporary BED file if input is from stdin
if [ "$PROMOTERFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo -e "${LINE}"
    done > $TMP
    PROMOTERFILE=$TMP
fi

## reformat score columns based on number of fields in region file
NCOL_PROMOTER=$(zless $PROMOTERFILE | head -n 1 | perl -ane 'print scalar(@F);')
NCOL_PEAKS=$(zless $PEAKFILE | head -n 1 | perl -ane 'print scalar(@F);')
oIFS=$IFS
IFS=","
SCORE_COLS=($SCORE_COL)
IFS=$oIFS

## compute signal at each input region
if [ ! -z "$OVERLAP_APPROACH" ]; then
    SCORE_COL=$((${SCORE_COLS[0]}+$NCOL_PROMOTER))
    for(( i=1; i<${#SCORE_COLS[@]}; i++)); do
        SCORE_COL="$SCORE_COL,$((${SCORE_COLS[$i]}+$NCOL_PROMOTER))"
    done

    intersectBed -a $PROMOTERFILE -b <(zless $PEAKFILE | grep -v start) -wao | intersectBed2uniq -i stdin -c $SCORE_COL -o sum -n $NCOL_PROMOTER
else
    DISTANCE_COL=$(($NCOL_PROMOTER+$NCOL_PEAKS+1))

<<"COMMENT"
COMMENT
    TMP_CLOSESTBED=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    if [ ! -z "$OVERLAP_CLOSEST_APPROACH" ]; then
        if [ ! -z "$SEGMENT_COL" ]; then
            closestBed -a <(zless $PEAKFILE | grep -v start | sortBed -i stdin) -b <(sortBed -i $PROMOTERFILE) -d -t first | closestBed2uniq -i stdin -c $SEGMENT_COL,$SCORE_COL,$DISTANCE_COL -o collapse -n $NCOL_PROMOTER > $TMP_CLOSESTBED
            N=$((${#SCORE_COLS[@]}+2))
        else
            closestBed -a <(zless $PEAKFILE | grep -v start | sortBed -i stdin) -b <(sortBed -i $PROMOTERFILE) -d -t first | closestBed2uniq -i stdin -c $SCORE_COL,$DISTANCE_COL -o collapse -n $NCOL_PROMOTER > $TMP_CLOSESTBED
            N=$((${#SCORE_COLS[@]}+1))
        fi
    else
        if [ ! -z "$SEGMENT_COL" ]; then
            closestBed -a <(zless $PEAKFILE | grep -v start | sortBed -i stdin) -b <(sortBed -i $PROMOTERFILE) -d -t first -io | closestBed2uniq -i stdin -c $SEGMENT_COL,$SCORE_COL,$DISTANCE_COL -o collapse -n $NCOL_PROMOTER > $TMP_CLOSESTBED
            N=$((${#SCORE_COLS[@]}+2))
        else
            closestBed -a <(zless $PEAKFILE | grep -v start | sortBed -i stdin) -b <(sortBed -i $PROMOTERFILE) -d -t first -io | closestBed2uniq -i stdin -c $SCORE_COL,$DISTANCE_COL -o collapse -n $NCOL_PROMOTER > $TMP_CLOSESTBED
            N=$((${#SCORE_COLS[@]}+1))
        fi
    fi

    TMP_ANNOTATEDPROMOTERFILE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    if [ ! -s "$TMP_ANNOTATEDPROMOTERFILE" ]; then
        cat $PROMOTERFILE | perl -ane '$match=`grep -E \"\\s+$F[3]\\s+\" '$TMP_CLOSESTBED' -m 1`; if($match=~/^$/) { chomp($_); print "$_"; for($i=0; $i<'$N'; $i++) { print "\tNA"; } print "\n"; } else { chomp($match); print "$match\n"; }' > $TMP_ANNOTATEDPROMOTERFILE
    fi
    
    if [ ! -z "$SEGMENT_COL" ]; then
        SEGMENT_COL=$(($NCOL_PROMOTER+1))
        SCORE_COL=$(($NCOL_PROMOTER+2))
    else
        SCORE_COL=$(($NCOL_PROMOTER+1))
    fi
    j=$SCORE_COL
    for(( i=1; i<${#SCORE_COLS[@]}; i++)); do
        j=$(($j+1))
        SCORE_COL="$SCORE_COL,$j"
    done
    DISTANCE_COL=$(zless $TMP_ANNOTATEDPROMOTERFILE | head -n 1 | perl -ane 'print scalar(@F);')

    #echo -e "$SCORE_COL\t$DISTANCE_COL\t$SEGMENT_COL";

    if [ ! -z "$SEGMENT_COL" ]; then
        $FINDNFRPATH/share/R/bed2weightedSignal.R -i $TMP_ANNOTATEDPROMOTERFILE -s $SCORE_COL -d $DISTANCE_COL -t $SEGMENT_COL
    else
        $FINDNFRPATH/share/R/bed2weightedSignal.R -i $TMP_ANNOTATEDPROMOTERFILE -s $SCORE_COL -d $DISTANCE_COL
    fi

    rm $TMP_CLOSESTBED
    rm $TMP_ANNOTATEDPROMOTERFILE
fi

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP;
fi

exit
