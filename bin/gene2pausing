#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
gene2pausing: measure pol2 pausing at most active TSS of genes
Copyright (C) 2018  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.01"
GENOME="mm9"
WINDOW=300
CONFIG_FILTER="pausing"

#### usage ####
usage() {
	echo Program: "gene2pausing (measure pol2 pausing at most active TSS of genes)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: gene2pausing -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates of genes in GTF or BED format (can be stdin)]"
    echo "             [source: ftp://ftp.sanger.ac.uk/pub/gencode/]"
    echo " -j <file>   [input mapped reads in BAM format]"
    echo "             [if multiple, separate them by a comma]"
    echo "             **OR**"
    echo "             [input configuration file containing bam file information]"
    echo "             [<id> <bam file> (eg. pausing pol2_esc_Rep1.bam)]"
    echo "             [<id> <bam file> (eg. pausing_strandAware groseq_esc_Rep1.bam)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
    echo " -w <int>    [extend TSS downstream with input number of bases to define TSSR (default: 300)]"
    echo " -r          [analyze protein coding genes only (default: all genes; only valid if input is in GTF format)]"
    echo " -c <file>   [input mapped reads in BAM format for control sample (IgG)]"
    echo " -f <string> [filter bam files from configuration file based on input indentifier (default: pausing)]"
    echo " -s          [require same strandedness (GRO-seq)]"
    echo "[OPTIONS: COMPUTE]"
    echo " -t          [compute travelling rate (default: pausing rate)]"
    echo "             [pausing rate = A/B]"
    echo "             [travelling rate = A/(A+B)]"
    echo "             [where A: RPKM at TSSR; B: RPKM at gene body + 3KB - TSSR]"
    echo " -e          [use signal at TESR as B (default: genebody)]"
    echo " -a          [output raw read counts as \"TSSR/Genebody\" (default: pause rate)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo "             [parameters are set as per details from Day et al. 2016 Genome Biology]"
    echo "[OUTPUT]"
    echo "             [for each input bam file: \"... TSSR_coordinate pol2_at_TSSR dist_closest_tss pausing\"]"
    echo "             **OR**"
    echo "             [for each input bam file: \"... TSSR_coordinate pol2_at_TSSR dist_closest_tss count_TSSR/count_genebody\"]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:w:rc:f:steah ARG; do
	case "$ARG" in
		i) GTFFILE=$OPTARG;;
        j) BAMFILE=$OPTARG;;
        g) GENOME=$OPTARG;;
        w) WINDOW=$OPTARG;;
        r) ONLYPROTEINCODING=1;;
        c) BAMFILECONTROL=$OPTARG;;
        f) CONFIG_FILTER=$OPTARG;;
        s) SAME_STRAND=1;;
        t) TR=1;;
        e) TESR_MODE=1;;
        a) RAW=1;;
		h) HELP=1;;
	esac
done

>&2 echo
if [ "$HELP" ]; then
    usage
fi

>&2 echo
>&2 echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$GTFFILE" -o -z "$BAMFILE" ]; then
    >&2 echo
    >&2 echo "Error: one or more required paramter values not provided"
    >&2 echo
	>&2 usage
fi
>&2 echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

>&2 echo -n "Populating files based on input genome, $GENOME (`date`).. "
GENOME_FILE=$(initialize_genome -i $FINDNFRPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$FINDNFRPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    >&2 echo
    >&2 echo "computation for $GENOME is not available yet"
    >&2 echo "please add the chromosome size file for $GENOME at $FINDNFRPATH/data/annotations"
    >&2 echo "also update the $FINDNFRPATH/data/annotations/GENOME_FILE"
    >&2 echo
    >&2 usage
fi
>&2 echo "done"

## check if input is BAM files or configuration file containing BAM file information
INPUT=$(echo $BAMFILE | perl -ane '$_=~s/\,.*//g; print $_;')
if [ "$(samtools view -H $INPUT | wc -l)" -le 0 ]; then
    ## read configuration file for nascent transcription data (gro-seq, cage etc)
    INPUT=$(cat $BAMFILE | perl -ane '
        if($_=~/^'$CONFIG_FILTER'_strandAware/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    BAMFILE_STRANDAWARE=$INPUT

    ## read configuration file
    INPUT=$(cat $BAMFILE | perl -ane '
        if($_=~/^'$CONFIG_FILTER'/ && $_!~/strandAware/) {
            $file.="$F[1],";
        } END {
            $file=~s/\,$//g;
            print "$file\n";
        }'
    )
    BAMFILE=$INPUT
fi

## create temporary BED file if input is from stdin
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
if [ "$GTFFILE" == "stdin" ]; then
    while read LINE; do
        echo "${LINE}"
    done > $TMP.gtf
    GTFFILE=$TMP.gtf
fi

## check, if input genomic coordinates are in BED format, and convert to GTF
IS_BED=$(zless $GTFFILE | cut -f 2 | head -n 2 | tail -n 1 | perl -ane 'if($_=~/^[0-9]+$/) { print $_; }' | wc -l);

if [ "$IS_BED" -gt 0 ]; then
    scp $GTFFILE $TMP.mostActiveTSS
else
    ## determine most active TSS for each gene
    ARG=""
    if [ ! -z "$ONLYPROTEINCODING" ]; then ARG=$(echo $ARG "-r "); fi
    if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
    if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-s "); fi

    gene2mostActiveTSS -i $GTFFILE -j $BAMFILE -g $GENOME -w $WINDOW $ARG | sortBed -i stdin > $TMP.mostActiveTSS
fi

## format arguments 
ARG=""
if [ ! -z "$BAMFILECONTROL" ]; then ARG=$(echo $ARG "-c $BAMFILECONTROL "); fi
if [ ! -z "$TESR_MODE" ]; then ARG=$(echo $ARG "-e "); fi
if [ ! -z "$RAW" ]; then ARG=$(echo $ARG "-a "); fi
if [ ! -z "$SAME_STRAND" ]; then ARG=$(echo $ARG "-r "); fi

NCOL=$(zless $TMP.mostActiveTSS | head -n 1 | perl -ane 'print scalar(@F);') 

if [ -z "$RAW" ]; then
    RAW=0;
fi

## compute pol2 pausing using strand aware data
if [ ! -z "$BAMFILE_STRANDAWARE" ]; then
    if [ -z "$TR" ]; then
        closestBed -a $TMP.mostActiveTSS -b $TMP.mostActiveTSS -d -t first -io | cut -f 1-$NCOL,$((NCOL*2+1)) | gene2signalValues -i stdin -j $BAMFILE -g $GENOME -w $WINDOW $ARG -r | perl -ane 'if('$RAW') { print $_; } else { print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { if($_=~/[0-9\.]+\/[0-9\.]+/) { @val=split(/\//,$_); printf("\t%0.5f", $val[0]/$val[1]); } else { print "\t$_"; } } print "\n"; }'
    else
        closestBed -a $TMP.mostActiveTSS -b $TMP.mostActiveTSS -d -t first -io | cut -f 1-$NCOL,$((NCOL*2+1)) | gene2signalValues -i stdin -j $BAMFILE -g $GENOME -w $WINDOW $ARG -r | perl -ane 'if('$RAW') { print $_; } else { print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { if($_=~/[0-9\.]+\/[0-9\.]+/) { @val=split(/\//,$_); printf("\t%0.5f", $val[0]/($val[0]+$val[1])); } else { print "\t$_"; } } print "\n"; }'
    fi | perl -ane 'print "$F['$NCOL']"; foreach(@F['$NCOL'+1..scalar(@F)-1]) { print "\t$_"; } print "\n";' > $TMP.pausingStrandAware
fi

## compute pol2 pausing
if [ -z "$TR" ]; then
    closestBed -a $TMP.mostActiveTSS -b $TMP.mostActiveTSS -d -t first -io | cut -f 1-$NCOL,$((NCOL*2+1)) | gene2signalValues -i stdin -j $BAMFILE -g $GENOME -w $WINDOW $ARG | perl -ane 'if('$RAW') { print $_; } else { print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { if($_=~/[0-9\.]+\/[0-9\.]+/) { @val=split(/\//,$_); printf("\t%0.5f", $val[0]/$val[1]); } else { print "\t$_"; } } print "\n"; }'
else
    closestBed -a $TMP.mostActiveTSS -b $TMP.mostActiveTSS -d -t first -io | cut -f 1-$NCOL,$((NCOL*2+1)) | gene2signalValues -i stdin -j $BAMFILE -g $GENOME -w $WINDOW $ARG | perl -ane 'if('$RAW') { print $_; } else { print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { if($_=~/[0-9\.]+\/[0-9\.]+/) { @val=split(/\//,$_); printf("\t%0.5f", $val[0]/($val[0]+$val[1])); } else { print "\t$_"; } } print "\n"; }'
fi > $TMP.pausing

if [ ! -z "$BAMFILE_STRANDAWARE" ]; then
    paste $TMP.pausing $TMP.pausingStrandAware
else
    paste $TMP.pausing
fi

## remove temporary file, if exists
if [ "$GTFFILE" == "stdin" ]; then
    rm $TMP.gtf
fi
rm $TMP.mostActiveTSS
rm $TMP.pausing
rm $TMP.pausingStrandAware

>&2 echo "All done.. bye"
