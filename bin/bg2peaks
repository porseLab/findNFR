#!/bin/bash
#PBS -l nodes=1:ppn=4

PVALUE=0.05
DISTRIBUTION="pois"
DISTANCE_PEAKS=0

#### usage ####
usage() {
	echo Program: "bg2peaks (determine peaks using blockbuster defined block groups)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bg2peaks -i <file> -o <dir>"
	echo "Options:"
	echo " -i <file>   [input file containing block groups in BED format (can be stdin)]"
    echo " -o <dir>    [output directory to keep fitDistr.R results]"
    echo "[OPTIONS]"
    echo " -p <float>  [pvalue for read enrichment (default: 0.05)]"
    echo " -d <string> [distribution to use for data fit (pois or nbinom) (default: pois)]"
    echo " -w <int>    [merge blocks (peaks) separated by given distance (default: 0)]"
    echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:p:d:w:h ARG; do
	case "$ARG" in
		i) INPUTFILE=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        p) PVALUE=$OPTARG;;
        d) DISTRIBUTION=$OPTARG;;
        w) DISTANCE_PEAKS=$OPTARG;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTFILE" -o -z "$OUTDIR" -o "$HELP" ]; then
	usage
fi

## create temporary BED file if input is from stdin
if [ "$INPUTFILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    INPUTFILE=$TMP
fi

## create output directory, if it does not exist
if [ ! -d "$OUTDIR" ]; then
    mkdir -p $OUTDIR
fi

## fit distribution to the input block groups
if [ ! -f "$OUTDIR/INPUT.BG.P_VALUE" ]; then
    #echo "cat $INPUTFILE | perl -ane 'print \"\$F[4]\\t\$F[0]\\t\$F[1]\\t\$F[2]\\t\$F[3]\\t\$F[5]\\n\";' | $FINDNFRPATH/share/R/fitDistr.R -i stdin -o $OUTDIR/INPUT.BG.P_VALUE -d $DISTRIBUTION"
    cat $INPUTFILE | perl -ane 'print "$F[4]\t$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[5]\n";' | $FINDNFRPATH/share/R/fitDistr.R -i stdin -o $OUTDIR/INPUT.BG.P_VALUE -d $DISTRIBUTION 2>&1 >/dev/null
fi

## remove temporary file, if exists
if [ ! -z "$TMP" ]; then
    rm $TMP
fi

## create final output containing both significant (Y) and non-significant peaks (N)
TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

cat $OUTDIR/INPUT.BG.P_VALUE | perl -ane 'if($F[6]<'$PVALUE') { print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\t$F[6]\tY\n"; }' | sortBed -i stdin | bedtools merge -c 4,5,6,7,8 -o distinct,sum,distinct,mean,distinct -d $DISTANCE_PEAKS > $OUTDIR/$TMP.sig

cat $OUTDIR/INPUT.BG.P_VALUE | perl -ane 'if($F[6]>='$PVALUE') { print "$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[0]\t.\t$F[6]\tN\n"; }' | sortBed -i stdin | bedtools merge -c 4,5,6,7,8 -o distinct,sum,distinct,mean,distinct -d $DISTANCE_PEAKS > $OUTDIR/$TMP.nonsig

cat $OUTDIR/$TMP.sig <(intersectBed -a $OUTDIR/$TMP.nonsig -b $OUTDIR/$TMP.sig -v)

## remove temporary file
rm $OUTDIR/$TMP.sig
rm $OUTDIR/$TMP.nonsig

exit
